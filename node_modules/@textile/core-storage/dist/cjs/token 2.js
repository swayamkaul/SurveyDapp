"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createToken = void 0;
const base64_1 = require("@stablelib/base64");
// Utilities and constants
const encoder = new TextEncoder();
const encode = encoder.encode.bind(encoder);
const padReg = /=+$/;
const { stringify } = JSON;
/**
 * Create a JWS.
 * @param signer The signer. Any object that satisfies the Signer interface.
 * @param opts Additional options to control the header and payload objects.
 * @returns A Promise that resolves to the full JWS string.
 * @note For ETH-based tokens we borrow ideas from: https://github.com/ethereum/EIPs/issues/1341
 */
function createToken(signer, header, claims) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        if (!claims.iss && !header.kid)
            throw new Error("InputError: must include kid header and/or iss claim");
        header = Object.assign({ typ: "JWT", alg: "EdDSA" }, header);
        // Default subject to the issuer
        claims.sub = (_b = (_a = claims.sub) !== null && _a !== void 0 ? _a : claims.iss) !== null && _b !== void 0 ? _b : header.kid;
        // UNIX origin time for current time
        const iat = ~~(Date.now() / 1000);
        const exp = iat + 60 * 10; // Default to ~10 minutes
        const payload = Object.assign({ nbf: iat - 10, iat,
            exp }, claims);
        // Optional: https://www.npmjs.com/package/canonicalize
        const encodedHeader = base64_1.encodeURLSafe(encode(stringify(header))).replace(padReg, "");
        const encodedPayload = base64_1.encodeURLSafe(encode(stringify(payload))).replace(padReg, "");
        const message = encode(`${encodedHeader}.${encodedPayload}`);
        const signature = yield signer.signMessage(message);
        const encodedSignature = base64_1.encodeURLSafe(signature).replace(padReg, "");
        const jws = `${encodedHeader}.${encodedPayload}.${encodedSignature}`;
        return { token: jws, claims: payload, header };
    });
}
exports.createToken = createToken;
//# sourceMappingURL=token.js.map