var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { isReadableStream } from "./utils";
export function create({ token, host }) {
    if (!host)
        throw new Error("Must provide remote host url");
    if (!token)
        throw new Error("Must provide self-signed access token");
    return {
        store: function store(data, { headers } = {}) {
            return __awaiter(this, void 0, void 0, function* () {
                let body;
                if (isReadableStream(data)) {
                    body = data;
                }
                else {
                    body = new FormData();
                    body.append("file", data, data.name);
                }
                const res = yield fetch(`${host}/upload`, {
                    method: "POST",
                    body: body,
                    headers: Object.assign(Object.assign({}, headers), { Authorization: `Bearer ${token}` }),
                });
                if (res.ok) {
                    const json = yield res.json();
                    return json;
                }
                const err = yield res.text();
                throw new Error(err);
            });
        },
        status: function status(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield fetch(`${host}/storagerequest/${id}`, {
                    method: "GET",
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });
                if (res.ok) {
                    const json = yield res.json();
                    return json;
                }
                const err = yield res.text();
                throw new Error(err);
            });
        },
    };
}
//# sourceMappingURL=storage.js.map