"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const eth_storage_bridge_1 = require("@textile/eth-storage-bridge");
const utils_1 = require("./utils");
function initDeposit(contract, _account) {
    return {
        addDeposit: (amount = utils_1.DEPOSIT, depositee = _account) => __awaiter(this, void 0, void 0, function* () {
            if (!depositee)
                throw new Error(`invalid depositee id: "${depositee}"`);
            return contract
                .addDeposit(depositee, {
                value: amount,
            })
                .then((tx) => tx.wait().then(() => undefined));
        }),
        releaseDeposit: (depositee = _account) => __awaiter(this, void 0, void 0, function* () {
            return contract
                .releaseDeposit(depositee)
                .then((tx) => tx.wait().then(() => undefined));
        }),
        releaseDeposits: () => __awaiter(this, void 0, void 0, function* () {
            return contract
                .releaseDeposits({ gasLimit: utils_1.GAS })
                .then((tx) => tx.wait().then(() => undefined));
        }),
        hasDeposit: (depositee = _account) => __awaiter(this, void 0, void 0, function* () {
            if (!depositee)
                throw new Error(`invalid depositee id: "${depositee}"`);
            return contract.hasDeposit(depositee);
        }),
        apiEndpoint: () => __awaiter(this, void 0, void 0, function* () {
            return contract.apiEndpoint();
        }),
    };
}
function create(account, contractId = utils_1.PROVIDER_ID) {
    return __awaiter(this, void 0, void 0, function* () {
        const contract = eth_storage_bridge_1.BridgeProvider__factory.connect(contractId, account);
        return initDeposit(contract, yield account.getAddress());
    });
}
exports.create = create;
//# sourceMappingURL=provider.js.map