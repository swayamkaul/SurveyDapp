"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const ethers_1 = require("ethers");
const core_storage_1 = require("@textile/core-storage");
/**
 * Create and sign a JWT token to produce a JWS.
 * @param signer A generic Signer interface as specified in `@textile/core-storage`.
 * @param claims A set of Standard Claims as specified by the JWT spec.
 * @returns A promise that resolves to a token string.
 */
function create(signer, claims) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // WARN: This is a non-standard JWT
        // Borrows ideas from: https://github.com/ethereum/EIPs/issues/1341
        const iss = yield signer.getAddress();
        const network = yield ((_a = signer.provider) === null || _a === void 0 ? void 0 : _a.getNetwork());
        const chain = (_b = network === null || network === void 0 ? void 0 : network.chainId) !== null && _b !== void 0 ? _b : "unknown";
        let net = network === null || network === void 0 ? void 0 : network.name;
        if (net === null || net === void 0 ? void 0 : net.startsWith("matic"))
            net = "poly";
        else
            net = "eth";
        const kid = `${net}:${chain}:${iss}`;
        const header = { alg: "ETH", typ: "JWT", kid };
        const sign = {
            signMessage: (message) => __awaiter(this, void 0, void 0, function* () {
                const sig = yield signer.signMessage(message);
                return ethers_1.utils.arrayify(sig);
            }),
        };
        const iat = ~~(Date.now() / 1000);
        const exp = iat + 60 * 60; // Default to ~60 minutes
        claims = Object.assign({ iss, exp, iat }, claims);
        const { token } = yield core_storage_1.createToken(sign, header, claims);
        return token;
    });
}
exports.create = create;
//# sourceMappingURL=token.js.map